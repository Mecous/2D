// -*-c++-*-

/*!
  \file action_chain_graph.h
  \brief cooperative action sequence searcher
*/

/*
 *Copyright:

 Copyright (C) Hiroki SHIMORA, Hidehisa AKIYAMA

 This code is free software; you can redistribute it and/or modify
 it under the terms of the GNU General Public License as published by
 the Free Software Foundation; either version 3, or (at your option)
 any later version.

 This code is distributed in the hope that it will be useful,
 but WITHOUT ANY WARRANTY; without even the implied warranty of
 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 GNU General Public License for more details.

 You should have received a copy of the GNU General Public License
 along with this code; see the file COPYING.  If not, write to
 the Free Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.

 *EndCopyright:
 */

/////////////////////////////////////////////////////////////////////

#ifndef ACTION_CHAIN_GRAPH_H
#define ACTION_CHAIN_GRAPH_H

#include "action_generator_holder.h"
#include "field_evaluator.h"
#include "predict_state.h"

#include "action_state_pair.h"

#include <rcsc/geom/vector_2d.h>

#include <boost/shared_ptr.hpp>

#include <vector>

namespace rcsc {
class PlayerAgent;
class WorldModel;
}

class ActionChainGraph {
public:

    typedef boost::shared_ptr< ActionChainGraph > Ptr; //!< pointer type alias
    typedef boost::shared_ptr< const ActionChainGraph > ConstPtr; //!< const pointer type alias

    struct Sequence {
        std::vector< ActionStatePair > chain_;
        double value_;
        double hvalue_;

        Sequence()
            : value_( 0.0 ),
              hvalue_( 0.0 )
          { }
    };

protected:

    FieldEvaluator::Ptr M_evaluator;
    ActionGeneratorHolder::ConstPtr M_action_generator;
    PredictState::ConstPtr M_first_state;

    const size_t M_ma
    void x_depth;
    const size_t M_max_traversal;

    size_t M_node_count;

    Sequence M_best_sequence;
    int M_best_sequence_index;

private:

    // not used
    ActionChainGraph();
    ActionChainGraph( const ActionChainGraph & );
    ActionChainGraph & operator=( const ActionChainGraph & );

public:

    /*!
      \brief constructor
      \param evaluator evaluator of each state
      \param generator action generator
      \param max_depth max depth of tree search
      \param max_traversal the search tree can generate the node up to this value
     */
    ActionChainGraph( FieldEvaluator::Ptr evaluator,
                      const ActionGeneratorHolder::ConstPtr & generator,
                      const size_t max_depth,
                      const size_t max_traversal );

    virtual
    ~ActionChainGraph()
      { }

    virtual
    void search( const rcsc::WorldModel & wm ) = 0;

    void setFieldEvaluator( FieldEvaluator::Ptr eval );

protected:

    void clearResult();
    void createDefaultHold( const rcsc::WorldModel & wm );

public:

    const std::vector< ActionStatePair > & bestSequence() const
      {
          return M_best_sequence.chain_;
      };

    const CooperativeAction & bestFirstAction() const
      {
          return M_best_sequence.chain_.front().action();
      };

protected:

    //
    // debug purpose
    //

    void debugPrintSequence( const size_t count,
                             const Sequence & sequence );

public:

    void debugSendBestSequence( rcsc::PlayerAgent * agent ) const;

};

#endif
